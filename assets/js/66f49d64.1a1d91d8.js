"use strict";(self.webpackChunkdocusaurus_2_classic_template=self.webpackChunkdocusaurus_2_classic_template||[]).push([[591],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1588:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={title:"Userscripts",description:"Userscripts allow you to run code along Scratch pages - you can do stuff like add buttons, enhance the Scratch editor, or anything you can imagine.",aliases:["/docs/developing/about-userscripts"]},s=void 0,i={unversionedId:"addon-types/userscripts",id:"addon-types/userscripts",title:"Userscripts",description:"Userscripts allow you to run code along Scratch pages - you can do stuff like add buttons, enhance the Scratch editor, or anything you can imagine.",source:"@site/develop/addon-types/userscripts.md",sourceDirName:"addon-types",slug:"/addon-types/userscripts",permalink:"/develop/addon-types/userscripts",draft:!1,tags:[],version:"current",frontMatter:{title:"Userscripts",description:"Userscripts allow you to run code along Scratch pages - you can do stuff like add buttons, enhance the Scratch editor, or anything you can imagine.",aliases:["/docs/developing/about-userscripts"]},sidebar:"tutorialSidebar",previous:{title:"Addon Types",permalink:"/develop/addon-types/"},next:{title:"Userstyles",permalink:"/develop/addon-types/userstyles"}},l={},c=[{value:"What are they?",id:"what-are-they",level:2},{value:"How do I add a userscript?",id:"how-do-i-add-a-userscript",level:2},{value:"What does the JavaScript file look like?",id:"what-does-the-javascript-file-look-like",level:2},{value:"<code>addon.*</code> APIs",id:"addon-apis",level:2},{value:"Technical aspects of userscripts",id:"technical-aspects-of-userscripts",level:2},{value:"Debugging userscripts",id:"debugging-userscripts",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"what-are-they"},"What are they?"),(0,r.kt)("p",null,"Userscripts allow you to run code along Scratch pages - you can do stuff like add buttons, enhance the Scratch editor, or anything you can imagine."),(0,r.kt)("h2",{id:"how-do-i-add-a-userscript"},"How do I add a userscript?"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Make sure to refresh Scratch Addons from ",(0,r.kt)("inlineCode",{parentName:"strong"},"chrome://extensions")," after doing any changes to your addon."),(0,r.kt)("br",{parentName:"p"}),"\n","Go to the manifest of your addon (addon.json) and add a property called ",(0,r.kt)("inlineCode",{parentName:"p"},'userscripts"'),".",(0,r.kt)("br",{parentName:"p"}),"\n","This property must be an array.",(0,r.kt)("br",{parentName:"p"}),"\n","Each item of the array must have the following properties: ",(0,r.kt)("inlineCode",{parentName:"p"},'"url"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'"matches"'),".",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},'"url"')," must be a relative URL to a JavaScript file.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},'"matches"')," must be an array of URLs where you want to run the userscript on. You can use asterisks.\nExample manifest:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "Scratch Messaging",\n  "description": "Provides easy reading and replying to your Scratch messages.",\n  "userscripts": [\n    {\n      "url": "userscript.js",\n      "matches": ["https://scratch.mit.edu/*"]\n    },\n    {\n      "url": "second_userscript.js",\n      "matches": ["https://scratch.mit.edu/projects/*", "https://scratch.mit.edu/users/*"]\n    }\n  ],\n  "tags": ["community"],\n  "enabledByDefault": false\n}\n')),(0,r.kt)("h2",{id:"what-does-the-javascript-file-look-like"},"What does the JavaScript file look like?"),(0,r.kt)("p",null,"Userscript JS files require a specific structure to work.",(0,r.kt)("br",{parentName:"p"}),"\n","For userscripts, you ",(0,r.kt)("strong",{parentName:"p"},"must")," wrap all your code inside a function looking like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'export default async function ({ addon, global, console }) {\n  console.log("Hello, " + await addon.auth.fetchUsername());\n}\n')),(0,r.kt)("p",null,"If you want to abstract code into functions for cleaner code, you should include them inside the main function:",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"This will work:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'export default async function ({ addon, global, console }) {\n  // This works!\n  sayHello();\n  async function sayHello() {\n    console.log("Hello, " + await addon.auth.fetchUsername());\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"This will NOT work:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'export default async function ({ addon, global, console }) {\n  // This WON\'T work!\n  sayHello();\n}\nasync function sayHello() {\n  console.log("Hello, " + await addon.auth.fetchUsername());\n  // Error: addon is not defined!\n}\n')),(0,r.kt)("h2",{id:"addon-apis"},(0,r.kt)("a",{parentName:"h2",href:"/develop/reference/addon-api/"},(0,r.kt)("inlineCode",{parentName:"a"},"addon.*")," APIs")),(0,r.kt)("p",null,"You can access many ",(0,r.kt)("inlineCode",{parentName:"p"},"addon.*")," APIs from userscripts. For more information, check the documentation."),(0,r.kt)("h2",{id:"technical-aspects-of-userscripts"},"Technical aspects of userscripts"),(0,r.kt)("p",null,"Userscripts run after the Scratch page has fully loaded - in other words, they run in ",(0,r.kt)("inlineCode",{parentName:"p"},"defer"),' mode.\nTechnically speaking, each userscript is a JavaScript module that exports a function. JavaScript modules always run on "strict mode".',(0,r.kt)("br",{parentName:"p"}),"\n","This means that userscripts of the same addon DO NOT share variables and functions! If you want to do that, you should use the ",(0,r.kt)("inlineCode",{parentName:"p"},"global")," object (more info below).\nScratch Addons then calls that function modules exported, giving it access to the ",(0,r.kt)("inlineCode",{parentName:"p"},"addon.*")," APIs, as well as special wrappers:  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"addon"),": gives userscripts access to the ",(0,r.kt)("a",{parentName:"li",href:"/develop/reference/addon-api/"},(0,r.kt)("inlineCode",{parentName:"a"},"addon.*")," APIs"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"global"),": this is a shared object between all userscripts of the same addon. ",(0,r.kt)("strong",{parentName:"li"},"Example usage:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// userscript-1.js\nexport default async function ({ addon, global, console }) {\n  global.sayHello = () => console.log("Hello, " + addon.auth.fetchUsername());\n}\n\n// userscript-2.js\nexport default async function ({ addon, global, console }) {\n  global.sayHello();\n  // This works, as long as in the addon manifest, userscript-1.js is before userscript-2.js in the userscripts array.\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"console"),": this is a wrapper that allows you to see what addon triggered the log you're seeing easily.")),(0,r.kt)("h2",{id:"debugging-userscripts"},"Debugging userscripts"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Make sure to refresh Scratch Addons from ",(0,r.kt)("inlineCode",{parentName:"strong"},"chrome://extensions")," after making any changes to your addon."),(0,r.kt)("br",{parentName:"p"}),"\n","To debug userscripts, first of all make sure your addon is enabled.",(0,r.kt)("br",{parentName:"p"}),"\n","Then, go to a URL where you specified your userscript should run.",(0,r.kt)("br",{parentName:"p"}),"\n","Open the console by pressing Ctrl+Shift+J.",(0,r.kt)("br",{parentName:"p"}),"\n","You should see console logs by addons, including yours. If you're a devtools pro, you won't have any trouble setting breakpoints in your code.",(0,r.kt)("br",{parentName:"p"}),"\n","Protip: if you want to test the ",(0,r.kt)("inlineCode",{parentName:"p"},"addon.*")," API without changing your file every time, make your addon ",(0,r.kt)("inlineCode",{parentName:"p"},"window.addon = addon;")," (inside the main function), and you'll be able to access your addon's ",(0,r.kt)("inlineCode",{parentName:"p"},"addon")," object from the console. Make sure to remove that line before contributing to the repo! Userscripts must not pollute the global object."))}d.isMDXComponent=!0}}]);