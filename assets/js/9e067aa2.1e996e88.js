"use strict";(self.webpackChunkdocusaurus_2_classic_template=self.webpackChunkdocusaurus_2_classic_template||[]).push([[4754],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||r;return t?a.createElement(h,l(l({ref:n},d),{},{components:t})):a.createElement(h,l({ref:n},d))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5483:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(7462),o=(t(7294),t(3905));const r={title:"Localizing Addons",description:"Localizing addons is easy."},l=void 0,i={unversionedId:"localization/localizing-addons",id:"localization/localizing-addons",title:"Localizing Addons",description:"Localizing addons is easy.",source:"@site/docs/localization/localizing-addons.md",sourceDirName:"localization",slug:"/localization/localizing-addons",permalink:"/docs/localization/localizing-addons",draft:!1,editUrl:"https://github.com/scratchaddons/docs/tree/main/docs/localization/localizing-addons.md",tags:[],version:"current",frontMatter:{title:"Localizing Addons",description:"Localizing addons is easy."},sidebar:"tutorialSidebar",previous:{title:"Joining the Localization Team",permalink:"/docs/localization/joining-the-localization-team"},next:{title:"Policies",permalink:"/docs/policies/"}},s={},c=[{value:"Adding messages",id:"adding-messages",level:2},{value:"Placeholders",id:"placeholders",level:3},{value:"Plurals",id:"plurals",level:3},{value:"Using the translations",id:"using-the-translations",level:2},{value:"Placeholders",id:"placeholders-1",level:3},{value:"Safety",id:"safety",level:3}],d={toc:c};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Localizing addons is easy."),(0,o.kt)("h2",{id:"adding-messages"},"Adding messages"),(0,o.kt)("p",null,"Under ",(0,o.kt)("inlineCode",{parentName:"p"},"addons-l10n/en/"),", make a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"ADDONID.json"),", where ADDONID is the addon's ID (the folder name). Write your messages that you want to translate there:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "ADDONID/meow": "Meow",\n  "ADDONID/cats": "{number, plural, one {1 cat} other {# cats}}",\n  "ADDONID/eat": "I want to eat {food}!",\n  "ADDONID/salmon": "salmon",\n  "ADDONID/sardine": "sardine"\n}\n')),(0,o.kt)("h3",{id:"placeholders"},"Placeholders"),(0,o.kt)("p",null,"Sometimes messages need to have things that are dynamically generated. For example, number of cats, or input. To handle this, you can use placeholders like ",(0,o.kt)("inlineCode",{parentName:"p"},"{placeholderName}"),". Placeholder name should only contain letters (no numbers)."),(0,o.kt)("h3",{id:"plurals"},"Plurals"),(0,o.kt)("p",null,"What if the placeholder is a number? We can use plurals like ",(0,o.kt)("inlineCode",{parentName:"p"},"{placeholderName, plural, one {when there is one thing} other {when there are # things}}"),'. If the placeholder is 1, it will show "when there is one thing", otherwise it says "when there are (placeholder) things".'),(0,o.kt)("h2",{id:"using-the-translations"},"Using the translations"),(0,o.kt)("p",null,"Change your userscript's first line from something like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"export default async function ({ addon, console }) {\n")),(0,o.kt)("p",null,"to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"export default async function ({ addon, console, msg }) {\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"msg")," added is the function you use to get translations. For example, ",(0,o.kt)("inlineCode",{parentName:"p"},'text = "Meow"')," can now be ",(0,o.kt)("inlineCode",{parentName:"p"},'text = msg("meow")'),". The addon ID and the slash is omitted."),(0,o.kt)("h3",{id:"placeholders-1"},"Placeholders"),(0,o.kt)("p",null,"You can provide placeholder values:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'cat = msg("cats", {number: 1}) // shows "1 cat"\ncats = msg("cats", {number: 3}) // shows "3 cats"\nhungry = msg("eat", {food: "cod"}) // shows "I want to eat cod!"\n')),(0,o.kt)("p",null,'You can also "nest" messages:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'hungry2 = msg("eat", {food: msg("salmon")}) // shows "I want to eat salmon!"\n')),(0,o.kt)("h3",{id:"safety"},"Safety"),(0,o.kt)("p",null,"If you are writing raw HTML, ",(0,o.kt)("inlineCode",{parentName:"p"},"msg")," should be replaced with safer version of ",(0,o.kt)("inlineCode",{parentName:"p"},"safeMsg"),"."))}p.isMDXComponent=!0}}]);